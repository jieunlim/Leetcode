
# T: O(N^2), S: O(1)
class Solution:
    def longestPalindrome(self, s: str) -> str:
        
        def helper(l, r):
            while l>=0 and r<len(s) and s[l] == s[r]:
                l -= 1
                r += 1
                
            return s[l+1:r]
        res = ""
        
        for i in range(len(s)):
            # res = max(helper(i, i), helper(i, i + 1), res, key=len)
            if len(helper(i, i)) > len(res):
                res = helper(i, i)
            if len(helper(i, i+1)) > len(res):
                res = helper(i, i+1)
        return res

#T: O(n^3), S: O(n)
class Solution:
    def longestPalindrome(self, s: str) -> str:
        
        res = s[0]
        def isPalindrome(substring):
            return substring == substring[::-1]
        
        for l in range(len(s)-1):
            for r in range(l, len(s)):
                if isPalindrome(s[l:r+1]):
                    if len(s[l:r+1])>len(res):
                        res = s[l:r+1]
        return res
